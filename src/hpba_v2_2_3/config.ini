[ATTACK]
# mandatory
# originalClass: origin class for attacking
#               Value is ranged from -1 to (number of class).
#               value = -1: attack all labels
originalLabel = -1


# mandatory
# Please specify one of the following arguments:
# targetLabel: fool classifier predicts as 'targetLabel'.
#              Value: -1 - no target label, otherwise specify target label

targetLabel = 2


# mandatory
# quality_loss: to ensure the quality of generated adversarial example.
#               Value: choose one of values: (MSE, SSIM, SSIM_MULTISCALE)
quality_loss = MSE

# optional
# Condition to stop the training process
L2_threshold_to_stop_attack = 6
L0_threshold_to_stop_attack =
SSIM_threshold_to_stop_attack =

# mandatory
# use_optimize_phase: Whether optimization phase to improve the adv image quality.
#                    Value: 0 - not use , 1 - use. Default 1
use_optimize_phase = 1

# optional
# recoverSpeed: number of feature to recover for each prediction (recoverSpeed * L0)
#               Default: 0.1
recoverSpeed = 0.1

# optional
# beta: trade-off between quality and success rate.
#         The greater 'beta', the greater success rate and the less quality, and vice versa. Default: 0.05
beta = 0.05

# optional
# numberDataToAttack: number of data for generating advs. Default: 1000
numberDataToAttack = 100

# optional
# numberDataToTrainAutoencoder: number of data for training autoencoder. Default: 1000
numberDataToTrainAutoencoder = 1000

# optional
# maxNumberAdvsToOptimize: number of advs need to be optimized in term of quality. Default: -1 as all generated advs will be optimized
#

# maxNumberAdvsToOptimize = -1

epoch_to_optimize = 10
batch_to_optimize = 500

[AUTOENCODER_TRAINING]
# optional
# autoencoder_model_path: path to pre-defined autoencoder model. Value: Empty or string
#                         If empty, the autoencoder will be created automatically in /src/attacker/autoencoder.py
autoencoder_model_path =

# mandatory
# epochs: number of epochs to train autoencoder
epochs = 100

# batch_size: size of batch data to train autoencoder
batch_size = 256

# learning_rate: learning_rate in optimizer
learning_rate = 0.0001

# print_result_every_epochs: print result after number of epochs
print_result_every_epochs = 3